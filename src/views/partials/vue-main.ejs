<script type="text/javascript">

// Initialize Google charts
google.charts.load('current');

//--------- BEGIN SELECT -------------------
let main = new Vue({
  el: '#sidebar-form',
  data: {
    selected: 'example.com',
    options: ['example.com'],
    results: {},
    sitename: ''
  },
  created () {
    let site = {}
    fetch('/results').then(resp => resp.json()).then(json => {
      let arr = []
      for (var i = 0; i < json.length; i++) {
        arr.push(json[i])
      }
      this.options = arr
      this.selected = arr[0]
    })
  },
  computed: {

  },
  methods: {
    updateModels: function() {
      // panelOverview.$data.pages =
      this.sitemapDb(this.selected).then(function(){
        console.log(this.results);
      });
    },
    sitemapDb: async function(id) {
      if (this.options.includes(id)) {
        fetch('/results/' + id).then(resp => resp.json()).then(json => {
          console.log(json);
          this.results = json
          panelOverview.pages = json.metadata.ogSiteName
        }).catch(err => console.log(err))
      } else {
        return null
      }
    },
    drawChart: function(data, options, id, chartType = 'ColumnChart') {
      let wrapper = new google.visualization.ChartWrapper({
          chartType: chartType,
          dataTable: data,
          options: options,
          containerId: 'vis_div'
        });
        wrapper.draw();
      }
    }
  }
});
//------------ END SELECT ----------------

let panelOverview = new Vue({
  el: "#panel-overview",
  data: {
    pages: "butt",
  },
  methods: {

  },
  computed: {
    sitemapOptions: function() {
      let obj = {}
      Object.keys(sitemap).forEach((el, index) => {
        obj[index] = {
          name: el
        }
      })
      return obj
    },
    sitemapNodeUrls: function() {
      if (!this.sitemapValue) {
        return [{ type: 'empty', url: 'empty' }]
      }
      let nodeTypes = sitemap[this.sitemapValue].nodeTypes
      let arr = []
      Object.keys(nodeTypes).forEach(function(el, index) {
        nodeTypes[el].urls.forEach(function(e, i) {
          arr.push({ type: el, url: e })
        })
      })

      return arr
    },
    sitemapMeta: function() {
      if (this.sitemapValue) {
        return sitemap[this.sitemapValue].metadata.title
      } else {
        return 'Drupal Content'
      }
    }
  },
  mounted() {
    if (this.sitemapValue) {
      this.createChart('nodeChart', this.sitemapNodes)
      this.createChart('formChart', this.sitemapForms)
      this.createChart('statusChart', this.sitemapStatus)
    }
  },
  metaInfo: {
    title: 'Drupal Content Audit'
  }
});


// Global name as `VirtualScrollList`
Vue.component('virtual-list', VirtualScrollList);



</script>


<script>
import sitemap from '../../../results/sitemap-results.json'
import { Bar, Line } from 'vue-chartjs'

export default {
  name: 'Dashboard',
  extends: Bar,
  props: {},
  data() {
    return {
      sitemapValue: Object.keys(sitemap)[0]
      // sitemapOptions: { 0: { name: 'No results, please run scraper.' } }
    }
  },
  methods: {
    createChart: function(chartId, chartData) {
      const ctx = document.getElementById(chartId)
      const myChart = new Chart(ctx, {
        type: chartData.type,
        data: chartData.data
        // options: chartData.options
      })
    },
    updateSitemap: function() {
      console.log('WORK')
      this.$nextTick(function() {
        console.log('tick ', this) // => 'updated'
      })
    }
  },
  computed: {
    sitemapOptions: function() {
      let obj = {}
      Object.keys(sitemap).forEach((el, index) => {
        obj[index] = {
          name: el
        }
      })
      return obj
    },
    sitemapNodes: function() {
      if (!this.sitemapValue) {
        return null
      }
      let nodeTypes = sitemap[this.sitemapValue].nodeTypes
      let chartdata = {
        type: 'bar',
        data: {
          labels: Object.keys(nodeTypes),
          datasets: [
            {
              label: 'Node Types',
              backgroundColor: '#f87979',
              data: Object.keys(nodeTypes).map(function(el, index) {
                return nodeTypes[el].count
              })
            }
          ]
        }
      }
      return chartdata
    },
    sitemapForms: function() {
      if (!this.sitemapValue) {
        return null
      }
      let formTypes = sitemap[this.sitemapValue].formTypes
      let chartdata = {
        type: 'bar',
        data: {
          labels: Object.keys(formTypes),
          datasets: [
            {
              label: 'Form Types',
              backgroundColor: '#f87979',
              data: Object.keys(formTypes).map(function(el, index) {
                return formTypes[el].count
              })
            }
          ]
        },
        options: {
          responsive: true,
          lineTension: 1,
          scales: {
            yAxes: [
              {
                ticks: {
                  beginAtZero: true,
                  padding: 25
                }
              }
            ]
          }
        }
      }
      return chartdata
    },
    sitemapStatus: function() {
      if (!this.sitemapValue) {
        return null
      }
      let statusCodes = sitemap[this.sitemapValue].statusCodes
      let chartdata = {
        type: 'bar',
        data: {
          labels: Object.keys(statusCodes),
          datasets: [
            {
              label: 'Status Codes',
              backgroundColor: '#f87979',
              data: Object.keys(statusCodes).map(function(el, index) {
                return statusCodes[el].count
              })
            }
          ]
        },
        options: {
          responsive: true,
          lineTension: 1,
          scales: {
            yAxes: [
              {
                ticks: {
                  beginAtZero: true,
                  padding: 25
                }
              }
            ]
          }
        }
      }
      return chartdata
    },
    sitemapNodeUrls: function() {
      if (!this.sitemapValue) {
        return [{ type: 'empty', url: 'empty' }]
      }
      let nodeTypes = sitemap[this.sitemapValue].nodeTypes
      let arr = []
      Object.keys(nodeTypes).forEach(function(el, index) {
        nodeTypes[el].urls.forEach(function(e, i) {
          arr.push({ type: el, url: e })
        })
      })

      return arr
    },
    sitemapMeta: function() {
      if (this.sitemapValue) {
        return sitemap[this.sitemapValue].metadata.title
      } else {
        return 'Drupal Content'
      }
    }
  },
  mounted() {
    if (this.sitemapValue) {
      this.createChart('nodeChart', this.sitemapNodes)
      this.createChart('formChart', this.sitemapForms)
      this.createChart('statusChart', this.sitemapStatus)
    }
  },
  metaInfo: {
    title: 'Drupal Content Audit'
  }
}
</script>
